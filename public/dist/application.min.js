"use strict";var ApplicationConfiguration=function(){var applicationModuleName="mean",applicationModuleVendorDependencies=["ngResource","ngAnimate","ui.router","ui.bootstrap","ui.utils"],registerModule=function(moduleName){angular.module(moduleName,[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("articles"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("groups"),ApplicationConfiguration.registerModule("soluznodes"),ApplicationConfiguration.registerModule("soluzproblems"),ApplicationConfiguration.registerModule("soluzsessions"),ApplicationConfiguration.registerModule("users"),angular.module("articles").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Articles","articles"),Menus.addMenuItem("topbar","New Article","articles/create")}]),angular.module("articles").config(["$stateProvider",function($stateProvider){$stateProvider.state("listArticles",{url:"/articles",templateUrl:"modules/articles/views/list-articles.client.view.html"}).state("createArticle",{url:"/articles/create",templateUrl:"modules/articles/views/create-article.client.view.html"}).state("viewArticle",{url:"/articles/:articleId",templateUrl:"modules/articles/views/view-article.client.view.html"}).state("editArticle",{url:"/articles/:articleId/edit",templateUrl:"modules/articles/views/edit-article.client.view.html"})}]),angular.module("articles").controller("ArticlesController",["$scope","$stateParams","$location","Authentication","Articles",function($scope,$stateParams,$location,Authentication,Articles){$scope.authentication=Authentication,$scope.create=function(){var article=new Articles({title:this.title,content:this.content});article.$save(function(response){$location.path("articles/"+response._id)},function(errorResponse){$scope.error=errorResponse.data.message}),this.title="",this.content=""},$scope.remove=function(article){if(article){article.$remove();for(var i in $scope.articles)$scope.articles[i]===article&&$scope.articles.splice(i,1)}else $scope.article.$remove(function(){$location.path("articles")})},$scope.update=function(){var article=$scope.article;article.$update(function(){$location.path("articles/"+article._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.articles=Articles.query()},$scope.findOne=function(){$scope.article=Articles.get({articleId:$stateParams.articleId})}}]),angular.module("articles").factory("Articles",["$resource",function($resource){return $resource("articles/:articleId",{articleId:"@_id"},{update:{method:"PUT"}})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed}}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["user"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:isPublic||this.menus[menuId].isPublic,roles:roles||this.defaultRoles,shouldRender:shouldRender}),this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("groups").run(["Menus",function(Menus){Menus.addMenuItem("Groups","Groups","groups"),Menus.addMenuItem("Groups","New Group","groups/create")}]),angular.module("groups").config(["$stateProvider",function($stateProvider){$stateProvider.state("listGroups",{url:"/groups",templateUrl:"modules/groups/views/list-groups.client.view.html"}).state("createGroup",{url:"/groups/create",templateUrl:"modules/groups/views/create-group.client.view.html"}).state("viewGroup",{url:"/groups/:groupId",templateUrl:"modules/groups/views/view-group.client.view.html"}).state("editGroup",{url:"/groups/:groupId/edit",templateUrl:"modules/groups/views/edit-group.client.view.html"})}]),angular.module("groups").controller("GroupsController",["$scope","$stateParams","$location","Authentication","Groups",function($scope,$stateParams,$location,Authentication,Groups){$scope.authentication=Authentication,$scope.create=function(){var group=new Groups({name:this.name});group.$save(function(response){$location.path("groups/"+response._id)},function(errorResponse){$scope.error=errorResponse.data.message}),this.name=""},$scope.remove=function(group){if(group){group.$remove();for(var i in $scope.groups)$scope.groups[i]===group&&$scope.groups.splice(i,1)}else $scope.group.$remove(function(){$location.path("groups")})},$scope.update=function(){var group=$scope.group;group.$update(function(){$location.path("groups/"+group._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.groups=Groups.query()},$scope.findOne=function(){$scope.group=Groups.get({groupId:$stateParams.groupId})}}]),angular.module("groups").factory("Groups",["$resource",function($resource){return $resource("groups/:groupId",{groupId:"@_id"},{update:{method:"PUT"}})}]),angular.module("soluznodes").run(["Menus",function(Menus){Menus.addMenuItem("Soluzion Nodes","Soluznodes","soluznodes"),Menus.addMenuItem("Soluzion Nodes","New Soluznode","soluznodes/create")}]),angular.module("soluznodes").config(["$stateProvider",function($stateProvider){$stateProvider.state("listSoluznodes",{url:"/soluznodes",templateUrl:"modules/soluznodes/views/list-soluznodes.client.view.html"}).state("createSoluznode",{url:"/soluznodes/create",templateUrl:"modules/soluznodes/views/create-soluznode.client.view.html"}).state("viewSoluznode",{url:"/soluznodes/:soluznodeId",templateUrl:"modules/soluznodes/views/view-soluznode.client.view.html"}).state("editSoluznode",{url:"/soluznodes/:soluznodeId/edit",templateUrl:"modules/soluznodes/views/edit-soluznode.client.view.html"})}]),angular.module("soluznodes").controller("SoluznodesController",["$scope","$stateParams","$location","Authentication","Soluznodes",function($scope,$stateParams,$location,Authentication,Soluznodes){$scope.authentication=Authentication,$scope.create=function(){var soluznode=new Soluznodes({name:this.name});soluznode.$save(function(response){$location.path("soluznodes/"+response._id)},function(errorResponse){$scope.error=errorResponse.data.message}),this.name=""},$scope.remove=function(soluznode){if(soluznode){soluznode.$remove();for(var i in $scope.soluznodes)$scope.soluznodes[i]===soluznode&&$scope.soluznodes.splice(i,1)}else $scope.soluznode.$remove(function(){$location.path("soluznodes")})},$scope.update=function(){var soluznode=$scope.soluznode;soluznode.$update(function(){$location.path("soluznodes/"+soluznode._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.soluznodes=Soluznodes.query()},$scope.findOne=function(){$scope.soluznode=Soluznodes.get({soluznodeId:$stateParams.soluznodeId})}}]),angular.module("soluznodes").factory("Soluznodes",["$resource",function($resource){return $resource("soluznodes/:soluznodeId",{soluznodeId:"@_id"},{update:{method:"PUT"}})}]),angular.module("soluzproblems").run(["Menus",function(Menus){Menus.addMenuItem("Problem Templates","Soluzproblems","soluzproblems"),Menus.addMenuItem("Problem Templates","New Soluzproblem","soluzproblems/create")}]),angular.module("soluzproblems").config(["$stateProvider",function($stateProvider){$stateProvider.state("listSoluzproblems",{url:"/soluzproblems",templateUrl:"modules/soluzproblems/views/list-soluzproblems.client.view.html"}).state("createSoluzproblem",{url:"/soluzproblems/create",templateUrl:"modules/soluzproblems/views/create-soluzproblem.client.view.html"}).state("viewSoluzproblem",{url:"/soluzproblems/:soluzproblemId",templateUrl:"modules/soluzproblems/views/view-soluzproblem.client.view.html"}).state("editSoluzproblem",{url:"/soluzproblems/:soluzproblemId/edit",templateUrl:"modules/soluzproblems/views/edit-soluzproblem.client.view.html"})}]),angular.module("soluzproblems").controller("SoluzproblemsController",["$scope","$stateParams","$location","Authentication","Soluzproblems",function($scope,$stateParams,$location,Authentication,Soluzproblems){$scope.authentication=Authentication,$scope.create=function(){var soluzproblem=new Soluzproblems({name:this.name});soluzproblem.$save(function(response){$location.path("soluzproblems/"+response._id)},function(errorResponse){$scope.error=errorResponse.data.message}),this.name=""},$scope.remove=function(soluzproblem){if(soluzproblem){soluzproblem.$remove();for(var i in $scope.soluzproblems)$scope.soluzproblems[i]===soluzproblem&&$scope.soluzproblems.splice(i,1)}else $scope.soluzproblem.$remove(function(){$location.path("soluzproblems")})},$scope.update=function(){var soluzproblem=$scope.soluzproblem;soluzproblem.$update(function(){$location.path("soluzproblems/"+soluzproblem._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.soluzproblems=Soluzproblems.query()},$scope.findOne=function(){$scope.soluzproblem=Soluzproblems.get({soluzproblemId:$stateParams.soluzproblemId})}}]),angular.module("soluzproblems").factory("Soluzproblems",["$resource",function($resource){return $resource("soluzproblems/:soluzproblemId",{soluzproblemId:"@_id"},{update:{method:"PUT"}})}]),angular.module("soluzsessions").run(["Menus",function(Menus){Menus.addMenuItem("Soluzion Sessions","Soluzsessions","soluzsessions"),Menus.addMenuItem("Soluzion Sessions","New Soluzsession","soluzsessions/create")}]),angular.module("soluzsessions").config(["$stateProvider",function($stateProvider){$stateProvider.state("listSoluzsessions",{url:"/soluzsessions",templateUrl:"modules/soluzsessions/views/list-soluzsessions.client.view.html"}).state("createSoluzsession",{url:"/soluzsessions/create",templateUrl:"modules/soluzsessions/views/create-soluzsession.client.view.html"}).state("viewSoluzsession",{url:"/soluzsessions/:soluzsessionId",templateUrl:"modules/soluzsessions/views/view-soluzsession.client.view.html"}).state("editSoluzsession",{url:"/soluzsessions/:soluzsessionId/edit",templateUrl:"modules/soluzsessions/views/edit-soluzsession.client.view.html"})}]),angular.module("soluzsessions").controller("SoluzsessionsController",["$scope","$stateParams","$location","Authentication","Soluzsessions",function($scope,$stateParams,$location,Authentication,Soluzsessions){$scope.authentication=Authentication,$scope.create=function(){var soluzsession=new Soluzsessions({name:this.name});soluzsession.$save(function(response){$location.path("soluzsessions/"+response._id)},function(errorResponse){$scope.error=errorResponse.data.message}),this.name=""},$scope.remove=function(soluzsession){if(soluzsession){soluzsession.$remove();for(var i in $scope.soluzsessions)$scope.soluzsessions[i]===soluzsession&&$scope.soluzsessions.splice(i,1)}else $scope.soluzsession.$remove(function(){$location.path("soluzsessions")})},$scope.update=function(){var soluzsession=$scope.soluzsession;soluzsession.$update(function(){$location.path("soluzsessions/"+soluzsession._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.soluzsessions=Soluzsessions.query()},$scope.findOne=function(){$scope.soluzsession=Soluzsessions.get({soluzsessionId:$stateParams.soluzsessionId})}}]),angular.module("soluzsessions").factory("Soluzsessions",["$resource",function($resource){return $resource("soluzsessions/:soluzsessionId",{soluzsessionId:"@_id"},{update:{method:"PUT"}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/signin.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http.delete("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);